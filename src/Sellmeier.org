#+TITLE: Sellmeier.jl
#+AUTHOR: Stefanos Carlström
#+EMAIL: stefanos.carlstrom@gmail.com

#+PROPERTY: header-args:julia :session *julia-Sellmeier*

The [[https://en.wikipedia.org/wiki/Sellmeier_equation][Sellmeier equations]] are used to describe dispersion in glass using
a series of resonances:

\[n^2(\lambda) =
1 + \sum_i \frac {B_i\lambda^2}{\lambda^2-C_i}.\]

* Media
  #+BEGIN_SRC julia
    using Unitful
    import Unitful: Length, Area, Frequency
    import Base: show

    struct Medium{T<:Real,A<:Area{T}}
        B::Vector{T}
        C::Vector{A}
    end

    function show(io::IO, m::Medium)
        write(io, "Medium(")
        show(io, m.B)
        write(io, @sprintf(", [%s])",
                           join(string.(m.C), ", ")))
    end
  #+END_SRC

  #+RESULTS:
  : show (generic function with 249 methods)

** BK7
   [[https://en.wikipedia.org/wiki/Borosilicate_glass][Borosilicate glass]] is commonly used in optical lenses
   #+BEGIN_SRC julia :results verbatim
     BK7 = Medium([1.03961212, 0.231792344, 1.01046945],
                  [6.00069867e-3u"μm"^2, 2.00179144e-2u"μm"^2, 1.03560653e2u"μm"^2])
   #+END_SRC

   #+RESULTS:
   : Medium([1.03961, 0.231792, 1.01047], [0.00600069867 μm^2, 0.0200179144 μm^2, 103.560653 μm^2])

** SiO₂
   [[https://en.wikipedia.org/wiki/Fused_quartz#Optical_properties][Fused silica]]
   #+BEGIN_SRC julia :results verbatim
     SiO2 = Medium([0.6961663, 0.4079426, 0.8974794],
                   [0.0684043u"μm", 0.1162414u"μm", 9.896161u"μm"].^2)
   #+END_SRC

   #+RESULTS:
   : Medium([0.696166, 0.407943, 0.897479], [0.00467914825849 μm^2, 0.013512063073959999 μm^2, 97.93400253792099 μm^2])

** TEST String representation
   #+BEGIN_SRC julia
     Bstr = string(BK7.B)
     Cstr = join(string.(BK7.C), ", ")
     @test string(BK7) == "Medium($(Bstr), [$(Cstr)])"
   #+END_SRC


* Refractive index
  #+BEGIN_SRC julia
    function n²(m::Medium, λ::Length)
        if !isfinite(λ)
            1.0
        else
            1.0 + reduce(+, 0,
                         [Bᵢ*λ^2/(λ^2-Cᵢ)
                          for (Bᵢ,Cᵢ) ∈ zip(m.B, m.C)]) |> NoUnits
        end
    end

    maybe_complex(x) = x<0 ? complex(x) : x
    refractive_index(m::Medium, λ::Length) = √(maybe_complex(n²(m, λ)))
    refractive_index(m::Medium, f::Frequency) = refractive_index(m, u"c"/f)

    (m::Medium)(x) = refractive_index(m, x)
  #+END_SRC

  #+RESULTS:
  : nothing

** TEST
   #+BEGIN_SRC julia
     using Unitful

     @test BK7(0.5876u"μm") ≈ 1.5168 atol=1e-3
     @test SiO2(0.5876u"μm") ≈ 1.4585 atol=1e-3
   #+END_SRC

* Dispersion
  #+BEGIN_SRC julia
    using Calculus

    # Calculate dispersion through a medium of length d. Optionally,
    # remove central frequency k-vector, to keep pulse centered.
    function dispersion(m::Medium, d::Length, f::AbstractVector{F}, f₀::Frequency = 0u"Hz") where {F<:Frequency}
        n = real(m.(f))

        # Wavevector in vacuum
        k₀ = 2π*f./u"c"
        # Wavevector in the medium
        k = n.*k₀

        if f₀ != 0u"Hz"
            # Slope of dispersion relation at central frequency
            ∂k∂f = (2π/u"c")*derivative(f -> real(BK7(f*u"Hz"))*f, f₀/u"Hz" .|> NoUnits)
            k -= ∂k∂f*f
        end

        exp.(-im*k*d)
    end
  #+END_SRC

** TEST Dispersion
   Dispersing a pulse through a positive amount of glass should
   /delay/ the pulse, i.e. its maximum should arrive /later/, and vice
   versa for a negative amount of glass (achievable through
   precompensation, common in pulse compressors).
   #+BEGIN_SRC julia
     λ = 500.0u"nm"
     f₀ = u"c"/λ |> u"THz"
     ω₀ = 2π*f₀
     τ = 6.2u"fs" # Pulse duration, intensity FWHM
     γ = τ^2/8log(2)

     f = linspace(0,30,2000)*f₀
     ω = 2π*f

     Ê = exp.(-(ω-ω₀).^2*γ)
     Ê′ = Ê.*dispersion(BK7, 6u"μm", f)
     Ê′′ = Ê.*dispersion(BK7, -6u"μm", f)
     Ê′′′ = Ê.*dispersion(BK7, -6u"μm", f, f₀)

     time_domain_envelope(spectrum) = abs.(fftshift(ifft(spectrum)*√(length(spectrum))))

     @test indmax(time_domain_envelope(Ê′)) > indmax(time_domain_envelope(Ê))
     @test indmax(time_domain_envelope(Ê′′)) < indmax(time_domain_envelope(Ê))
     @test indmax(time_domain_envelope(Ê′′′)) == indmax(time_domain_envelope(Ê))
   #+END_SRC

* Exports
  #+BEGIN_SRC julia
    export Medium, BK7, SiO2, refractive_index, dispersion
  #+END_SRC
